pipeline {
    agent any

    environment {
        PATH = "${PATH}:${getTerraformPath()}"
        TERRAFORM_DIR = "Clixx"
        // Add these environment variables for non-interactive terraform
        TF_INPUT = "0"
        TF_IN_AUTOMATION = "1"
        // S3 backend configuration
        TF_CLI_ARGS_init = "-backend-config='bucket=vpcbuckstate-rclaye' -backend-config='key=terraform.tfstate' -backend-config='region=us-east-1'"
    }
    
    stages {
        stage('Approval to Launch Pipeline') {
            steps {
                script {
                    input(
                        id: 'start_confirm',
                        message: 'Ready to Launch the Pipeline?',
                        parameters: [
                            [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Start the Pipeline?', name: 'confirm']
                        ]
                    )
                }
            }
        }

        stage('Check Workspace') {
            steps {
                script {
                    // Display workspace info to help with debugging
                    sh 'echo "Current directory:"'
                    sh 'pwd'
                    sh 'echo "Files in directory:"'
                    sh 'ls -la'
                    sh 'echo "Checking if Clixx directory exists:"'
                    sh '[ -d "Clixx" ] && echo "Clixx directory exists" || echo "Clixx directory NOT FOUND"'
                    
                    // Display the backend.tf file content in the Clixx directory
                    sh '''
                        echo "Checking backend.tf configuration in the Clixx directory:"
                        if [ -f "Clixx/backend.tf" ]; then
                            echo "Backend.tf file found in Clixx directory:"
                            cat "Clixx/backend.tf"
                            echo ""
                        else
                            echo "Backend.tf file NOT FOUND in Clixx directory"
                        fi
                        
                        echo "Checking backend.tf configuration in the root directory:"
                        if [ -f "backend.tf" ]; then
                            echo "Backend.tf file found in root directory:"
                            cat "backend.tf"
                            echo ""
                        else
                            echo "Backend.tf file NOT FOUND in root directory"
                        fi
                    '''
                }
            }
        }

        stage('Terraform Init') {
            steps {
                slackSend(
                    channel: '#stackjenkins',
                    color: '#3498DB',
                    message: """TERRAFORM INIT
Status: Started
User: RCLAYE
Job: ${env.JOB_NAME} [${env.BUILD_NUMBER}]
Time: ${new Date().format("HH:mm:ss")}
URL: ${env.BUILD_URL}"""
                )
                
                sh """
                    cd ${TERRAFORM_DIR}
                    # Remove local state files to ensure we're using the S3 state
                    rm -f terraform.tfstate terraform.tfstate.backup
                    # Initialize terraform with force-copy flag
                    terraform init -force-copy
                    # List files to verify state files were removed
                    ls -la
                """
            }
        }

        stage('Terraform Plan') {
            steps {
                withCredentials([file(credentialsId: 'clixx-tfvars', variable: 'TFVARS_FILE')]) {
                    slackSend(
                        channel: '#stackjenkins',
                        color: '#F39C12',
                        message: """TERRAFORM PLAN
Status: Started
User: RCLAYE
Job: ${env.JOB_NAME} [${env.BUILD_NUMBER}]
Time: ${new Date().format("HH:mm:ss")}
URL: ${env.BUILD_URL}"""
                    )
                    sh """
                        cd ${TERRAFORM_DIR}
                        terraform plan -var-file="\$TFVARS_FILE" -out=tfplan -input=false
                    """
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                withCredentials([file(credentialsId: 'clixx-tfvars', variable: 'TFVARS_FILE')]) {
                    slackSend(
                        channel: '#stackjenkins',
                        color: '#2ECC71',
                        message: """TERRAFORM APPLY
Status: Started
User: RCLAYE
Job: ${env.JOB_NAME} [${env.BUILD_NUMBER}]
Time: ${new Date().format("HH:mm:ss")}
URL: ${env.BUILD_URL}"""
                    )
                    sh """
                        cd ${TERRAFORM_DIR}
                        terraform apply -var-file="\$TFVARS_FILE" -input=false tfplan
                    """
                }
            }
        }

        stage('Approval to Destroy Infrastructure') {
            steps {
                script {
                    input(
                        id: 'destroy_confirm',
                        message: 'Do you want to destroy this environment?',
                        parameters: [
                            [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Run terraform destroy?', name: 'confirm']
                        ]
                    )
                }
            }
        }

        stage('Terraform Destroy') {
            steps {
                withCredentials([file(credentialsId: 'clixx-tfvars', variable: 'TFVARS_FILE')]) {
                    slackSend(
                        channel: '#stackjenkins',
                        color: '#E74C3C',
                        message: """TERRAFORM DESTROY
Status: Started
User: RCLAYE
Job: ${env.JOB_NAME} [${env.BUILD_NUMBER}]
Time: ${new Date().format("HH:mm:ss")}
URL: ${env.BUILD_URL}
WARNING: Removing Infrastructure"""
                    )
                    sh """
                        cd ${TERRAFORM_DIR}
                        terraform destroy -var-file="\$TFVARS_FILE" -auto-approve
                    """
                }
            }
        }
    }

    post {
        success {
            slackSend(
                channel: '#stackjenkins',
                color: '#2ECC71',
                message: """TERRAFORM SUCCESS
User: RCLAYE
Job: ${env.JOB_NAME} [${env.BUILD_NUMBER}]
Time: ${new Date().format("HH:mm:ss")}
Status: Completed Successfully
URL: ${env.BUILD_URL}"""
            )
            echo "Deployment successful."
        }
        failure {
            slackSend(
                channel: '#stackjenkins',
                color: '#E74C3C',
                message: """TERRAFORM FAILURE
User: RCLAYE
Job: ${env.JOB_NAME} [${env.BUILD_NUMBER}]
Time: ${new Date().format("HH:mm:ss")}
Status: Failed
Check logs for details
URL: ${env.BUILD_URL}"""
            )
            echo "Deployment failed. Check logs."
        }
        always {
            script {
                if (currentBuild.currentResult == 'SUCCESS' && env.STAGE_NAME == 'Terraform Destroy') {
                    slackSend(
                        channel: '#stackjenkins',
                        color: '#9B59B6',
                        message: """TERRAFORM DESTROY SUCCESS
User: RCLAYE
Job: ${env.JOB_NAME} [${env.BUILD_NUMBER}]
Time: ${new Date().format("HH:mm:ss")}
Status: Infrastructure Removed
URL: ${env.BUILD_URL}"""
                    )
                } else if (currentBuild.currentResult == 'FAILURE' && env.STAGE_NAME == 'Terraform Destroy') {
                    slackSend(
                        channel: '#stackjenkins',
                        color: '#C0392B',
                        message: """TERRAFORM DESTROY FAILED
User: RichardC
Job: ${env.JOB_NAME} [${env.BUILD_NUMBER}]
Time: ${new Date().format("HH:mm:ss")}
Status: Failed to remove infrastructure
URL: ${env.BUILD_URL}"""
                    )
                }
            }
        }
    }
}

def getTerraformPath() {
    return tool(name: 'terraform-14', type: 'terraform')
}
